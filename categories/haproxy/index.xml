<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haproxy on Le Blog de Gauthier</title>
    <link>http://gauthierc.github.io/categories/haproxy/</link>
    <description>Recent content in Haproxy on Le Blog de Gauthier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Sun, 24 Jan 2016 18:39:12 +0100</lastBuildDate>
    <atom:link href="http://gauthierc.github.io/categories/haproxy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Let&#39;s Encrypt avec Haproxy</title>
      <link>http://gauthierc.github.io/post/letsencrypt-haproxy/</link>
      <pubDate>Sun, 24 Jan 2016 18:39:12 +0100</pubDate>
      
      <guid>http://gauthierc.github.io/post/letsencrypt-haproxy/</guid>
      <description>

&lt;p&gt;Voici la documentation qui m&amp;rsquo;a permis de mettre en place Let&amp;rsquo;s Encrypt avec Haproxy.&lt;/p&gt;

&lt;p&gt;Sources:
 * &lt;a href=&#34;https://coolaj86.com/articles/lets-encrypt-with-haproxy/&#34;&gt;https://coolaj86.com/articles/lets-encrypt-with-haproxy/&lt;/a&gt;
 * &lt;a href=&#34;https://blog.infomee.fr/p/letsencrypt-haproxy&#34;&gt;https://blog.infomee.fr/p/letsencrypt-haproxy&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;principe:c30dc1d4818827fbc538c272551afcf9&#34;&gt;Principe&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s Encrypt permet de générer un certificat valide de façon automatique. Ce certificat a une durée de validité de 3 mois. Il faut donc le renouveler très régulièrement.
Pour fonctionner letsencrypt a besoin d&amp;rsquo;un serveur web, dans notre cas haproxy est juste un proxy, ce n&amp;rsquo;est pas lui qui fournit les pages, mais les serveurs web des backends.
le script letsencrypt a besoin de créer un fichier pour le challenge dans le répertoire d&amp;rsquo;un serveur web. Le chemin étant facilement identifiable, nous allons créer un acl sur haproxy pour renvoyer les pages letsencrypt sur un serveur apache en particulier.&lt;/p&gt;

&lt;h1 id=&#34;installation-de-let-s-encrypt:c30dc1d4818827fbc538c272551afcf9&#34;&gt;Installation de Let&amp;rsquo;s Encrypt&lt;/h1&gt;

&lt;p&gt;Il n&amp;rsquo;existe pas actuellement de packet debian de Let&amp;rsquo;s Encrypt pour les debian avant Stretch (actuellement en testing). Il est donc nécessaire de procéder à l&amp;rsquo;installation depuis les sources.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/letsencrypt/letsencrypt
cd letsencrypt
./letsencrypt-auto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le script d&amp;rsquo;installation va créer une arborescence /root/.local/share/letsencrypt/ et y installer le logiciel.
Par soucis de simplicité il faut ensuite aller dans /usr/sbin et créer un lien avec la commande :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s /root/.local/share/letsencrypt/bin/letsencrypt 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configuration-d-apache:c30dc1d4818827fbc538c272551afcf9&#34;&gt;Configuration d&amp;rsquo;Apache&lt;/h1&gt;

&lt;p&gt;Nous avons besoin d&amp;rsquo;un serveur web pour fournir la page du challenge. Nous allons configurer Apache pour qu&amp;rsquo;il écoute sur 127.0.0.1:1080. Le documentRoot sera /var/www/letsencrypt.request/.&lt;/p&gt;

&lt;p&gt;Fichier /etc/apache/ports.conf:
    Listen 127.0.0.1:1080&lt;/p&gt;

&lt;p&gt;Fichier /etc/apache/sites-available/letsencrypt.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:1080&amp;gt;
  ServerName letsencrypt.request
  DocumentRoot /var/www/letsencrypt.request
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Activer le nouveau site et désactiver le site par défaut :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a2ensite letsencrypt
/etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configuration-de-haproxy:c30dc1d4818827fbc538c272551afcf9&#34;&gt;Configuration de Haproxy&lt;/h1&gt;

&lt;p&gt;Prenons le cas où nous n&amp;rsquo;avons qu&amp;rsquo;une seul ip et donc qu&amp;rsquo;un seul frontend haproxy pour le http et un autre pour le https:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;frontend ft_http-in
    option http-keep-alive
    compression algo gzip
    compression type text/html text/plain text/css application/x-javascript
    option      httplog
    bind *:80
    acl letsencrypt_check path_beg /.well-known/acme-challenge
    # ... les autres acl
    use_backend letsencrypt_backend if letsencrypt_check
    # ... les autres use_backend

frontend https-in
    bind *:443 ssl crt /etc/ssl/letsencrypt
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    acl letsencrypt_check path_beg /.well-known/acme-challenge
    # ... les autres acl
    use_backend letsencrypt_backend if letsencrypt_check
    # ... les autres use_backend

backend letsencrypt_backend
    http-request set-header Host letsencrypt.request
    server apache 127.0.0.1:1080 check
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;création-du-certificat:c30dc1d4818827fbc538c272551afcf9&#34;&gt;Création du certificat&lt;/h1&gt;

&lt;p&gt;Création d&amp;rsquo;un seul certificat:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;letsencrypt certonly --email adminsys@mondomaine.org --webroot -w /var/www/letsencrypt.request/ -d www.mondomaine.org 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;letsencrypt va créer une arborescence dans /etc/letsencrypt mais pour utiliser ces certificats dans haproxy il faut concaténer les fichiers dans un seul dans le répertoire /etc/ssl/letsencrypt avec le programme suivant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
for domain in $(ls /etc/letsencrypt/live); do 
    cat /etc/letsencrypt/live/$domain/privkey.pem /etc/letsencrypt/live/$domain/fullchain.pem &amp;gt; /etc/ssl/letsencrypt/$domain.pem
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>